package com.fullstack.security;

//import java.io.IOException;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
//import org.springframework.security.core.context.SecurityContextHolder;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
//import org.springframework.stereotype.Component;
//import org.springframework.web.filter.OncePerRequestFilter;
//
//import io.jsonwebtoken.ExpiredJwtException;
//import io.jsonwebtoken.MalformedJwtException;
//import jakarta.servlet.FilterChain;
//import jakarta.servlet.ServletException;
//import jakarta.servlet.http.HttpServletRequest;
//import jakarta.servlet.http.HttpServletResponse;
//import lombok.RequiredArgsConstructor;
//
//// This class helps us to validate the generated jwt token 
//@Component
//@RequiredArgsConstructor
//public class JwtAuthFilter extends OncePerRequestFilter {
//
//
//
//	@Autowired
//	private JwtService jwtService;
//
//	@Autowired
//	private UserDetailsService userDetailsService;
//
//	@Override
//	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//			throws ServletException, IOException {
////		String authHeader = request.getHeader("Authorization");
////		String token = null;
////		String userName = null;
////		if (authHeader != null && authHeader.startsWith("Bearer ")) {
////			token = authHeader.substring(7);
////			userName = jwtService.extractUsername(token);
////		}
////
////		if (userName != null && SecurityContextHolder.getContext().getAuthentication() == null) {
////			UserDetails userDetails = userDetailsService.loadUserByUsername(userName);
////			if (jwtService.validateToken(token, userDetails)) {
////				UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails,
////						null, userDetails.getAuthorities());
////				authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
////				SecurityContextHolder.getContext().setAuthentication(authToken);
////			}
////		}
////		filterChain.doFilter(request, response);
////	}
//		
//		
//		
//		  String requestHeader = request.getHeader("Authorization");
//	        //Bearer 2352345235sdfrsfgsdfsdf
////	        logger.info(" Header :  {}", requestHeader);
//	        String username = null;
//	        String token = null;
//	        if (requestHeader != null && requestHeader.startsWith("Bearer")) {
//	            //looking good
//	            token = requestHeader.substring(7);
//	            try {
//
//	                username = this.jwtService.extractUsername(token);
//
//	            } catch (IllegalArgumentException e) {
//	                logger.info("Illegal Argument while fetching the username !!");
//	                e.printStackTrace();
//	            } catch (ExpiredJwtException e) {
//	                logger.info("Given jwt token is expired !!");
//	                e.printStackTrace();
//	            } catch (MalformedJwtException e) {
//	                logger.info("Some changed has done in token !! Invalid Token");
//	                e.printStackTrace();
//	            } catch (Exception e) {
//	                e.printStackTrace();
//
//	            }
//
//
//	        } else {
//	            logger.info("Invalid Header Value !! ");
//	        }
//
//
//	        //
//	        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
//
//
//	            //fetch user detail from username
//	            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
//	            Boolean validateToken = this.jwtService.validateToken(token, userDetails);
//	            if (validateToken) {
//
//	                //set the authentication
//	                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
//	                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
//	                SecurityContextHolder.getContext().setAuthentication(authentication);
//
//
//	            } else {
//	                logger.info("Validation fails !!");
//	            }
//
//
//	        }
//
//	        filterChain.doFilter(request, response);
//
//
//	    }
//	
//		
//}








import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.Authentication;
import org.springframework.web.filter.OncePerRequestFilter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class JwtAuthFilter extends OncePerRequestFilter {
    private final JwtService jwtService;
    private final UserDetailsService userDetailsService;

    public JwtAuthFilter(JwtService jwtService, UserDetailsService userDetailsService) {
        this.jwtService = jwtService;
        this.userDetailsService = userDetailsService;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String token = extractToken(request);
        if (token != null && jwtService.validateToken(token)) {
            String username = jwtService.extractUsername(token);
            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                Authentication authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }
        filterChain.doFilter(request, response);
    }

    private String extractToken(HttpServletRequest request) {
        // Extract and return the token from the request, e.g., from the Authorization header.
        // Implement this part based on your token format.
        // Example:
        String authorizationHeader = request.getHeader("Authorization");
        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            return authorizationHeader.substring(7);
        }
        return null;
    }
}






